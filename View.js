const readlineSync = require('readline-sync');
const fs = require('fs');

class View {
  constructor(gamer, coins, txtFile) {
    this.gamer = gamer;
    this.coins = coins;
    this.txtFile = txtFile;
  }
  choiceTheme() {
    //–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Ç–µ–º—ã(—Ñ–∞–π–ª .txt)
    const userName = readlineSync.question('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ù–∏–∫ ü§î\n');
    console.log('–ü—Ä–∏–≤–µ—Ç ' + userName + ' ‚úã');
    this.gamer = userName;

    const txtFile = [
      `${__dirname}/topics/nighthawk_flashcard_data.txt`,
      `${__dirname}/topics/otter_flashcard_data.txt`,
      `${__dirname}/topics/raccoon_flashcard_data.txt`,
    ];
    const choiceTheme = require('readline-sync'),
      animals = ['–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–ö–æ—Å–º–æ—Å', 'IT'],
      index = choiceTheme.keyInSelect(
        animals,
        '–ö–∞–∫—É—é —Ç–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å‚ùì ü§î\n'
      );
    console.log('–ö–ª–∞—Å—Å‚ùó ' + animals[index] + ', –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã üëç');

    return [this.gamer, (this.txtFile = txtFile[[index]])];
  }

  questionAnswer(questions, answers) {
    this.coins = 0;
    for (let i = 0; i <= questions.length; i++) {
      if (i === questions.length) {
        return;
      } else {
        let answersI = readlineSync.question(`\n${questions[i]}\n`);
        if (answersI === answers[i]) {
          this.coins += 1;
          console.log('–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç + 1ü™ô');
        } else {
          console.log('–£–≤—ã —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ùå');
        }
      }
    }
  }

  finalFar(gamer, coins) {
    console.log(`\n${gamer} —Ç—ã –º–æ–ª–æ–¥–µ—Ü üí™\n—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${coins}ü™ô`);
  }
}

module.exports = View;
